// generated from rosidl_adapter/resource/srv.idl.em
// with input from carma_msgs/srv/RequestIndicatorControl.srv
// generated code does not contain a copyright notice

#include "carma_msgs/msg/LightBarCDAType.idl"
#include "carma_msgs/msg/LightBarIndicator.idl"

module carma_msgs {
  module srv {
    @verbatim (language="comment", text=
      " RequestIndicatorControl.srv" "\n"
      "" "\n"
      " Provided by the LightBarManager node. Plugins and component" "\n"
      " requests control of a lightbar indicator through this service." "\n"
      " They can either give info about the Cooperative Driving Automation (CDA)" "\n"
      " Msg Classes it is broadcasting (so that the manager can find appropriate" "\n"
      " lightbar indicator mapping) or directly specify the indicators they want." "\n"
      " The user should use only one of the methods, otherwise, LightBarCDAType msg" "\n"
      " information will be used over the indicator (LightBarIndicator msg type will" "\n"
      " be ignored). Therefore, if the component MUST set both ways, call the service" "\n"
      " twice." "\n"
      "" "\n"
      " @author Misheel Bayartsengel" "\n"
      " @version 0.1")
    struct RequestIndicatorControl_Request {
      @verbatim (language="comment", text=
        " Request - List of indicators the component requests control of")
      sequence<carma_msgs::msg::LightBarIndicator> ind_list;

      sequence<carma_msgs::msg::LightBarCDAType> cda_list;

      string requester_name;
    };
    @verbatim (language="comment", text=
      " Response - List of indicators that were dinied of control. CDATypes match" "\n"
      " correctly with its indicator in the response")
    struct RequestIndicatorControl_Response {
      sequence<carma_msgs::msg::LightBarIndicator> ind_list;

      sequence<carma_msgs::msg::LightBarCDAType> cda_list;
    };
  };
};
