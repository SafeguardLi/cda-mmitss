// generated from rosidl_adapter/resource/msg.idl.em
// with input from j2735_v2x_msgs/msg/TrafficControlSchedule.msg
// generated code does not contain a copyright notice

#include "j2735_v2x_msgs/msg/DailySchedule.idl"
#include "j2735_v2x_msgs/msg/DayOfWeek.idl"
#include "j2735_v2x_msgs/msg/RepeatParams.idl"

module j2735_v2x_msgs {
  module msg {
    @verbatim (language="comment", text=
      " TrafficControlSchedule.msg" "\n"
      "" "\n"
      " Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard" "\n"
      "" "\n"
      " J2735 2016 message format." "\n"
      "" "\n"
      " @version 0.1" "\n"
      "" "\n"
      " Description" "\n"
      " ...")
    struct TrafficControlSchedule {
      @verbatim (language="comment", text=
        " TrafficControlSchedule ::= SEQUENCE" "\n"
        " {" "\n"
        "  start EpochMins, -- start time required, even if it's the epoch value zero" "\n"
        "  end [0] EpochMins OPTIONAL, -- default to max value 153722867280912" "\n"
        "  dow [1] DayOfWeek OPTIONAL," "\n"
        "  between [2] SEQUENCE (SIZE(1..63)) OF DailySchedule OPTIONAL," "\n"
        "  repeat [3] RepeatParams OPTIONAL" "\n"
        " }" "\n"
        " start EpochMins, -- start time required, even if it's the epoch value zero")
      uint64 start;

      @verbatim (language="comment", text=
        " end EpochMins OPTIONAL, -- default to max value 153722867280912")
      @unit (value="0")
      uint64 end;

      boolean end_exists;

      @verbatim (language="comment", text=
        " dow DayOfWeek OPTIONAL,")
      @unit (value="1")
      j2735_v2x_msgs::msg::DayOfWeek dow;

      boolean dow_exists;

      @verbatim (language="comment", text=
        " between SEQUENCE (SIZE(1..63)) OF DailySchedule OPTIONAL,")
      @unit (value="2")
      sequence<j2735_v2x_msgs::msg::DailySchedule> between;

      boolean between_exists;

      @verbatim (language="comment", text=
        " repeat RepeatParams OPTIONAL")
      @unit (value="3")
      j2735_v2x_msgs::msg::RepeatParams repeat;

      boolean repeat_exists;
    };
  };
};
