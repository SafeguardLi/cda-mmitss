// generated from rosidl_adapter/resource/msg.idl.em
// with input from j2735_v2x_msgs/msg/ConnectionManeuverAssist.msg
// generated code does not contain a copyright notice


module j2735_v2x_msgs {
  module msg {
    struct ConnectionManeuverAssist {
      @verbatim (language="comment", text=
        " The ConnectionManeuverAssist data frame contains information about the the dynamic flow of traffic for the lane(s)" "\n"
        " and maneuvers in question (as determined by the LaneConnectionID). Note that this information can be sent regarding" "\n"
        " any lane-to-lane movement; it need not be limited to the lanes with active (non-red) phases when sent." "\n"
        "" "\n"
        " ConnectionManeuverAssist ::= SEQUENCE {" "\n"
        " connectionID LaneConnectionID," "\n"
        " -- the common connectionID used by all lanes to which" "\n"
        " -- this data applies" "\n"
        " -- (this value traces to ConnectsTo entries in lanes)" "\n"
        " -- Expected Clearance Information" "\n"
        " queueLength ZoneLength OPTIONAL," "\n"
        " -- Unit = 1 meter, 0 = no queue" "\n"
        " -- The distance from the stop line to the back" "\n"
        " -- edge of the last vehicle in the queue," "\n"
        " -- as measured along the lane center line." "\n"
        " availableStorageLength ZoneLength OPTIONAL," "\n"
        " -- Unit = 1 meter, 0 = no space remains" "\n"
        " -- Distance (e.g. beginning from the downstream" "\n"
        " -- stop-line up to a given distance) with a high" "\n"
        " -- probability for successfully executing the" "\n"
        " -- connecting maneuver between the two lanes" "\n"
        " -- during the current cycle." "\n"
        " -- Used for enhancing the awareness of vehicles" "\n"
        " -- to anticipate if they can pass the stop line" "\n"
        " -- of the lane. Used for optimizing the green wave," "\n"
        " -- due to knowledge of vehicles waiting in front" "\n"
        " -- of a red light (downstream)." "\n"
        " -- The element nextTime in TimeChangeDetails" "\n"
        " -- in the containing data frame contains the next" "\n"
        " -- timemark at which an active phase is expected," "\n"
        " -- a form of storage flush interval." "\n"
        " waitOnStop WaitOnStopline OPTIONAL," "\n"
        " -- If \"true\", the vehicles on this specific connecting" "\n"
        " -- maneuver have to stop on the stop-line and not" "\n"
        " -- to enter the collision area" "\n"
        " pedBicycleDetect PedestrianBicycleDetect OPTIONAL," "\n"
        " -- true if ANY ped or bicycles are detected crossing" "\n"
        " -- the above lanes. Set to false ONLY if there is a" "\n"
        " -- high certainty that there are none present," "\n"
        " -- otherwise element is not sent." "\n"
        " regional SEQUENCE (SIZE(1..4)) OF RegionalExtension {{REGION.Reg-ConnectionManeuverAssist}} OPTIONAL," "\n"
        " ..." "\n"
        " }" "\n"
        " LaneConnectionID ::= INTEGER (0..255)")
      uint8 connection_id;

      @verbatim (language="comment", text=
        " ZoneLength ::= INTEGER (0..10000)" "\n"
        " -- Unit = 1 meter, 0 = unknown," "\n"
        " -- The value 10000 to be used for Distances >=10000 m" "\n"
        " -- (e.g. from known point to another point along a" "\n"
        " -- known path, often against traffic flow direction" "\n"
        " -- when used for measuring queues)")
      uint16 queue_length;

      boolean queue_length_exists;

      @verbatim (language="comment", text=
        " ZoneLength ::= INTEGER (0..10000)")
      uint16 available_storage_length;

      boolean available_storage_length_exists;

      @verbatim (language="comment", text=
        " WaitOnStopline ::= BOOLEAN --- True or False" "\n"
        " -- If \"true\", the vehicles on this specific connecting" "\n"
        " -- maneuver have to stop on the stop-line" "\n"
        " -- and not to enter the collision area")
      boolean wait_on_stop;

      boolean wait_on_stop_exists;

      @verbatim (language="comment", text=
        " PedestrianBicycleDetect ::= BOOLEAN" "\n"
        " -- true if ANY Pedestrians or Bicyclists are" "\n"
        " -- detected crossing the target lane or lanes")
      boolean ped_bicycle_detect;

      boolean ped_bicycle_detect_exists;
    };
  };
};
