// generated from rosidl_adapter/resource/msg.idl.em
// with input from j2735_v2x_msgs/msg/LaneDirection.msg
// generated code does not contain a copyright notice


module j2735_v2x_msgs {
  module msg {
    @verbatim (language="comment", text=
      " LaneDirection.msg" "\n"
      "" "\n"
      " J2735 2016 message format." "\n"
      "" "\n"
      " @author Mae Fromm" "\n"
      " @version 0.1" "\n"
      "" "\n"
      " The LaneDirection data element is used to denote the allowed direction of travel over a lane object. By convention," "\n"
      " the lane object is always described from the stop line outwards away from the intersection. Therefore, the ingress" "\n"
      " direction is from the end of the path to the stop line and the egress direction is from the stop line outwards. It should be" "\n"
      " noted that some lane objects are not used for travel and that some lane objects allow bi-directional travel." "\n"
      "" "\n"
      " LaneDirection ::= BIT STRING {" "\n"
      " -- With bits as defined:" "\n"
      " -- Allowed directions of travel in the lane object" "\n"
      " -- All lanes are described from the stop line outwards" "\n"
      " ingressPath (0)," "\n"
      " -- travel from rear of path to front is allowed" "\n"
      " egressPath (1)" "\n"
      " -- travel from front of path to rear is allowed" "\n"
      " -- Notes: No Travel, i.e. the lane object type does not support travel (medians, curbs, etc.)" "\n"
      " is indicated by not asserting any bit value" "\n"
      " - Bi-Directional Travel (such as a ped crosswalk) is indicated by asserting both of the bits" "\n"
      " } (SIZE (2))")
    struct LaneDirection {
      uint8 lane_direction;
    };
  };
};
