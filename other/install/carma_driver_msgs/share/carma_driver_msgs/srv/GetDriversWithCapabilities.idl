// generated from rosidl_adapter/resource/srv.idl.em
// with input from carma_driver_msgs/srv/GetDriversWithCapabilities.srv
// generated code does not contain a copyright notice


module carma_driver_msgs {
  module srv {
    @verbatim (language="comment", text=
      " GetDriversWithCapabilities.srv" "\n"
      "" "\n"
      " Returns a list of driver apis that provide ALL of the requested capabilities." "\n"
      " If a driver provides capabilities that are not requested, those extra capabilities will be ignored (no" "\n"
      " penalty for a driver that is \"over-qualified\").")
    struct GetDriversWithCapabilities_Request {
      @verbatim (language="comment", text=
        "#### Request #####" "\n"
        " Capabilities is a list of descriptive strings. The complete set of possible capabilities strings can" "\n"
        " be found by referencing the ROS messages.xlsx spreadsheet in the detailed design folder of the Carma platform" "\n"
        " software engineering library. In that file the string to be used here comes from the" "\n"
        " \"Name (in code)\" column. Only names that apply to Drivers listed under the Package column are applicable." "\n"
        " Of those names, the following topics & services should be ignored, as they are not capabilities: bind, bond," "\n"
        " get_driver_api, driver_discovery.  With the remaining information in the \"Name (in code)\" column of the" "\n"
        " spreadsheet, there are two ways to identify a desired capability." "\n"
        "   1) if the requestor doesn't care about what driver provides the capability, then just list the data name" "\n"
        "      itself (the part after the right-most '/').  For example, \"heading\"." "\n"
        "   2) if the requestor only wants the capability from a particular type of driver, then that driver type" "\n"
        "      can be included in the capability request, separated from the capability name by a '/'.  For example," "\n"
        "      \"position/heading\". Such a request will ensure that other data sources are not considered. In this" "\n"
        "      example, if there was a compass sensor that also provided heading, it would not be returned in the" "\n"
        "      response because it would be identified as \"sensor/heading\"." "\n"
        " The specific list of supported capabilities is not documented here because it may change from time" "\n"
        " to time.  The ROS messages.xlsx is the official source for that information.")
      sequence<string> capabilities;
    };
    struct GetDriversWithCapabilities_Response {
      @verbatim (language="comment", text=
        "#### Response #####" "\n"
        " a list of drivers and their capabilities that meet the given criteria. Each element is reported as a" "\n"
        " fully-qualified name of the form [driver_name]/[driver_type]/[capability].  If the request included" "\n"
        " only [capability] fields without the [driver_type] qualifier, then this return list may show multiple" "\n"
        " drivers of different types that provide the same capability.")
      sequence<string> driver_data;
    };
  };
};
