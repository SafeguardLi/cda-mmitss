// generated from rosidl_adapter/resource/msg.idl.em
// with input from carma_planning_msgs/msg/PlatooningInfo.msg
// generated code does not contain a copyright notice


module carma_planning_msgs {
  module msg {
    module PlatooningInfo_Constants {
      const uint8 DISABLED = 0;
      const uint8 SEARCHING = 1;
      const uint8 CONNECTING_TO_NEW_FOLLOWER = 2;
      const uint8 CONNECTING_TO_NEW_LEADER = 3;
      const uint8 LEADING = 4;
      const uint8 FOLLOWING = 5;
    };
    @verbatim (language="comment", text=
      " PlatooningInfo.msg" "\n"
      "" "\n"
      " The details of the current platoon information" "\n"
      "" "\n"
      " @author Shuwei Qiang" "\n"
      " @version 0.1")
    struct PlatooningInfo {
      @verbatim (language="comment", text=
        " Platoon state")
      uint8 state;

      @verbatim (language="comment", text=
        " Current platoon ID (GUID)")
      string platoon_id;

      @verbatim (language="comment", text=
        " Platoon current size")
      uint8 size;

      @verbatim (language="comment", text=
        " Platoon size upper limit")
      uint8 size_limit;

      @verbatim (language="comment", text=
        " Leader vehicle static Id (license plate)")
      string leader_id;

      @verbatim (language="comment", text=
        " Leader current downtrack distance")
      float leader_downtrack_distance;

      @verbatim (language="comment", text=
        " Leader command speed")
      float leader_cmd_speed;

      @verbatim (language="comment", text=
        " Host position in platoon")
      uint8 host_platoon_position;

      @verbatim (language="comment", text=
        " Host adjusted command speed")
      float host_cmd_speed;

      @verbatim (language="comment", text=
        " Desired gap with leader")
      float desired_gap;

      @verbatim (language="comment", text=
        " Actual gap with leader")
      float actual_gap;

      @verbatim (language="comment", text=
        " The time headway summation of all predecessors")
      float current_predecessor_time_headway_sum;

      @verbatim (language="comment", text=
        " The speed of the preceding vehicle, in m/s.")
      float predecessor_speed;

      @verbatim (language="comment", text=
        " The position of the preceding vehicle, in m.")
      float predecessor_position;

      @verbatim (language="comment", text=
        " The status of gap creation.")
      boolean is_create_gap;

      @verbatim (language="comment", text=
        " Ratio to increase desired gap")
      float create_gap_adjuster;
    };
  };
};
